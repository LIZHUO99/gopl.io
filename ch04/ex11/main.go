package main

import (
	"flag"
	"fmt"
	"log"
	"os"

	"gopl.io/ch04/ex11/github"
)

var (
	command = flag.String("command", "search", "search/create/update/close")
	token   = flag.String("token", "", "generated by github used for create, update, and close")
	title   = flag.String("title", "", "an issue's title used for create and update")
	body    = flag.String("body", "", "an issue's body used for create and update")
	number  = flag.String("number", "", "number of issue used for update and close ")
)
var GITHUB_ACCESS_TOKEN string

func main() {
	flag.Parse()
	GITHUB_ACCESS_TOKEN = *token
	switch *command {
	case "search":
		search()
	case "create":
		create(*title, *body)
	case "update":
		update(*number, *title, *body)
	case "close":
		close(*number)
	default:
		flag.Usage()
		os.Exit(1)
	}

}

func search() {
	result, err := github.SearchIssues()
	if err != nil {
		log.Fatal(err)
	}
	for _, issue := range result {
		printIssue(issue)
	}
}

func create(title, body string) {
	issue, err := github.CreateIssue(&github.IssueCreate{Title: title, Body: body}, GITHUB_ACCESS_TOKEN)
	if err != nil {
		log.Fatal(err)
	}
	printIssue(issue)
}
func update(number, title, body string) {
	issue, err := github.UpdateIssue(number, &github.IssueUpdate{Title: title, Body: body}, GITHUB_ACCESS_TOKEN)
	if err != nil {
		log.Fatal(err)
	}
	printIssue(issue)
}
func close(number string) {
	issue, err := github.UpdateIssue(number, &github.IssueUpdate{State: "closed"}, GITHUB_ACCESS_TOKEN)
	if err != nil {
		log.Fatal(err)
	}
	printIssue(issue)

}
func printIssue(issue *github.Issue) {
	fmt.Printf("#%-5d %9.9s %.55s\n",
		issue.Number, issue.User.Login, issue.Title)
}
